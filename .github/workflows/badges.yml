name: Update Badges

on:
  workflow_run:
    workflows: ["CI", "Type Check", "Security Scan"]
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-badges:
    name: Update Status Badges
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create badges directory
        run: mkdir -p .github/badges
      
      - name: Generate CI badge
        uses: schneegans/dynamic-badges-action@v1.7.0
        with:
          auth: ${{ secrets.GIST_SECRET }}
          gistID: ${{ secrets.BADGE_GIST_ID }}
          filename: crisp-py-ci.json
          label: CI
          message: ${{ github.event.workflow_run.conclusion == 'success' && 'passing' || 'failing' }}
          color: ${{ github.event.workflow_run.conclusion == 'success' && 'brightgreen' || 'red' }}
          namedLogo: github-actions
      
      - name: Generate coverage badge
        if: github.event.workflow_run.name == 'CI'
        run: |
          # Download coverage artifact from CI workflow
          ARTIFACT_URL=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}/artifacts" \
            | jq -r '.artifacts[] | select(.name | startswith("coverage-")) | .archive_download_url' | head -1)
          
          if [ -n "$ARTIFACT_URL" ]; then
            curl -L -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "$ARTIFACT_URL" -o coverage.zip
            unzip -p coverage.zip coverage.xml > coverage.xml
            
            # Extract coverage percentage
            COVERAGE=$(python -c "
import xml.etree.ElementTree as ET
tree = ET.parse('coverage.xml')
root = tree.getroot()
coverage = float(root.attrib['line-rate']) * 100
print(f'{coverage:.1f}')
" 2>/dev/null || echo "0")
            
            # Determine color based on coverage
            if (( $(echo "$COVERAGE >= 90" | bc -l) )); then
              COLOR="brightgreen"
            elif (( $(echo "$COVERAGE >= 80" | bc -l) )); then
              COLOR="green"
            elif (( $(echo "$COVERAGE >= 70" | bc -l) )); then
              COLOR="yellow"
            elif (( $(echo "$COVERAGE >= 60" | bc -l) )); then
              COLOR="orange"
            else
              COLOR="red"
            fi
            
            # Update coverage badge
            curl -X POST \
              -H "Authorization: token ${{ secrets.GIST_SECRET }}" \
              -d "{\"files\":{\"crisp-py-coverage.json\":{\"content\":\"{\\\"schemaVersion\\\": 1, \\\"label\\\": \\\"coverage\\\", \\\"message\\\": \\\"${COVERAGE}%\\\", \\\"color\\\": \\\"${COLOR}\\\"}\"}}}" \
              "https://api.github.com/gists/${{ secrets.BADGE_GIST_ID }}"
          fi
      
      - name: Update README with badges
        run: |
          # Only update if badges section doesn't exist
          if ! grep -q "## Status" README.md 2>/dev/null; then
            cat >> README.md << 'EOF'

## Status

![CI](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${{ github.repository_owner }}/${{ secrets.BADGE_GIST_ID }}/raw/crisp-py-ci.json)
![Coverage](https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/${{ github.repository_owner }}/${{ secrets.BADGE_GIST_ID }}/raw/crisp-py-coverage.json)
![Python](https://img.shields.io/badge/python-3.11%20%7C%203.12-blue)
[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)
[![Checked with mypy](http://www.mypy-lang.org/static/mypy_badge.svg)](http://mypy-lang.org/)
[![security: bandit](https://img.shields.io/badge/security-bandit-yellow.svg)](https://github.com/PyCQA/bandit)
EOF
            
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add README.md
            git commit -m "=Ê Add status badges to README" || true
            git push || true
          fi