name: Format Check

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  workflow_dispatch:

env:
  UV_CACHE_DIR: /tmp/.uv-cache

jobs:
  format-check:
    name: Check Code Formatting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      
      - name: Set up cache
        uses: actions/cache@v4
        with:
          path: /tmp/.uv-cache
          key: uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
          restore-keys: |
            uv-${{ runner.os }}-${{ hashFiles('uv.lock') }}
            uv-${{ runner.os }}
      
      - name: Install dependencies
        run: |
          uv sync --all-extras --dev
          uv pip install black isort flake8 flake8-docstrings flake8-bugbear flake8-comprehensions
      
      - name: Check Black formatting
        id: black-check
        run: |
          echo "::group::Running Black check"
          uv run black --check --diff --color .
          echo "::endgroup::"
        working-directory: crisp-py
        continue-on-error: true
      
      - name: Check isort formatting
        id: isort-check
        run: |
          echo "::group::Running isort check"
          uv run isort --check-only --diff --color .
          echo "::endgroup::"
        working-directory: crisp-py
        continue-on-error: true
      
      - name: Run flake8 linting
        id: flake8-check
        run: |
          echo "::group::Running flake8"
          uv run flake8 . --count --statistics --show-source
          echo "::endgroup::"
        working-directory: crisp-py
        continue-on-error: true
      
      - name: Generate formatting diff
        if: failure() || steps.black-check.outcome == 'failure' || steps.isort-check.outcome == 'failure'
        run: |
          echo "## Formatting Issues Found" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.black-check.outcome }}" == "failure" ]; then
            echo "### Black Formatting Issues" >> $GITHUB_STEP_SUMMARY
            echo '```diff' >> $GITHUB_STEP_SUMMARY
            uv run black --diff . >> $GITHUB_STEP_SUMMARY 2>&1 || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.isort-check.outcome }}" == "failure" ]; then
            echo "### Import Sort Issues" >> $GITHUB_STEP_SUMMARY
            echo '```diff' >> $GITHUB_STEP_SUMMARY
            uv run isort --diff . >> $GITHUB_STEP_SUMMARY 2>&1 || true
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "**To fix these issues locally, run:**" >> $GITHUB_STEP_SUMMARY
          echo '```bash' >> $GITHUB_STEP_SUMMARY
          echo "make format" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
        working-directory: crisp-py
      
      - name: Fail if formatting issues found
        if: steps.black-check.outcome == 'failure' || steps.isort-check.outcome == 'failure' || steps.flake8-check.outcome == 'failure'
        run: |
          echo "❌ Code formatting issues found!"
          echo "Please run 'make format' locally and commit the changes."
          exit 1
  
  auto-format:
    name: Auto-format (PR only)
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.head_ref }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      
      - name: Install dependencies
        run: |
          uv sync --all-extras --dev
          uv pip install black isort
      
      - name: Auto-format code
        run: |
          make format
      
      - name: Check for changes
        id: check-changes
        run: |
          if git diff --quiet; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit and push changes
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git add -A
          git commit -m "🎨 Auto-format code with Black and isort"
          git push
      
      - name: Comment on PR
        if: steps.check-changes.outputs.changed == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: '🎨 I\'ve automatically formatted the code using Black and isort. Please pull the latest changes.'
            })