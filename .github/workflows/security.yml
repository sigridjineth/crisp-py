name: Security Scan

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of security scan to run'
        required: false
        type: choice
        options:
          - all
          - dependencies
          - code
          - secrets
        default: all

# Cancel in-progress runs when a new run is triggered
concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: "3.12"
  UV_VERSION: "0.5.9"

jobs:
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'dependencies' || github.event.inputs.scan_type == ''
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
      
      - name: Install security tools
        run: |
          uv sync --all-extras --dev
          uv pip install safety pip-audit cyclonedx-bom
      
      - name: Generate SBOM (Software Bill of Materials)
        run: |
          uv run cyclonedx-py -p -o sbom.json --format json
          uv run cyclonedx-py -p -o sbom.xml --format xml
          
          echo "## Software Bill of Materials" >> $GITHUB_STEP_SUMMARY
          echo "SBOM files generated in JSON and XML formats" >> $GITHUB_STEP_SUMMARY
        working-directory: crisp-py
      
      - name: Run Safety check
        id: safety
        run: |
          echo "::group::Safety vulnerability scan"
          uv run safety check --json --output safety-report.json || echo "safety-found-issues=true" >> $GITHUB_OUTPUT
          uv run safety check --short-report || true
          echo "::endgroup::"
        working-directory: crisp-py
      
      - name: Run pip-audit
        id: pip-audit
        run: |
          echo "::group::pip-audit vulnerability scan"
          uv run pip-audit --desc --format json --output pip-audit-report.json || echo "pip-audit-found-issues=true" >> $GITHUB_OUTPUT
          uv run pip-audit --desc || true
          echo "::endgroup::"
        working-directory: crisp-py
      
      - name: Check for outdated dependencies
        run: |
          echo "::group::Outdated dependencies check"
          uv pip list --outdated || true
          echo "::endgroup::"
        working-directory: crisp-py
      
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-security-reports
          path: |
            crisp-py/safety-report.json
            crisp-py/pip-audit-report.json
            crisp-py/sbom.json
            crisp-py/sbom.xml
          retention-days: 30
      
      - name: Create summary
        if: always()
        run: |
          echo "## Dependency Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.safety.outputs.safety-found-issues }}" == "true" ]; then
            echo "ï¿½ **Safety found vulnerable dependencies**" >> $GITHUB_STEP_SUMMARY
          else
            echo " Safety check passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.pip-audit.outputs.pip-audit-found-issues }}" == "true" ]; then
            echo "ï¿½ **pip-audit found vulnerable dependencies**" >> $GITHUB_STEP_SUMMARY
          else
            echo " pip-audit check passed" >> $GITHUB_STEP_SUMMARY
          fi

  code-scan:
    name: Code Security Scan
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'code' || github.event.inputs.scan_type == ''
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        uses: astral-sh/setup-uv@v3
        with:
          version: ${{ env.UV_VERSION }}
      
      - name: Install security tools
        run: |
          uv sync --all-extras --dev
          uv pip install bandit[toml] semgrep
      
      - name: Run Bandit
        id: bandit
        run: |
          echo "::group::Bandit security scan"
          uv run bandit -r crisp/ -f json -o bandit-report.json --severity-level medium || echo "bandit-found-issues=true" >> $GITHUB_OUTPUT
          uv run bandit -r crisp/ -f txt --severity-level medium || true
          echo "::endgroup::"
        working-directory: crisp-py
      
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/python
            p/owasp-top-ten
            p/r2c-security-audit
          generateSarif: true
      
      - name: Upload Semgrep SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
          category: semgrep
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: python
          queries: security-and-quality
      
      - name: Upload code scan reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: code-security-reports
          path: |
            crisp-py/bandit-report.json
            semgrep.sarif
          retention-days: 30

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    if: github.event.inputs.scan_type == 'all' || github.event.inputs.scan_type == 'secrets' || github.event.inputs.scan_type == ''
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for secret scanning
          persist-credentials: false
      
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}
      
      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-scan, secret-scan]
    if: always()
    
    steps:
      - name: Create security report
        run: |
          echo "# = Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Scan | ${{ needs.code-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [ "${{ needs.dependency-scan.result }}" == "success" ] && \
             [ "${{ needs.code-scan.result }}" == "success" ] && \
             [ "${{ needs.secret-scan.result }}" == "success" ]; then
            echo "###  All security scans passed!" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ï¿½ Some security scans require attention" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Please review the individual scan results above." >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const comment = `## = Security Scan Results
            
            | Scan | Status |
            |------|--------|
            | Dependencies | ${{ needs.dependency-scan.result }} |
            | Code Analysis | ${{ needs.code-scan.result }} |
            | Secret Detection | ${{ needs.secret-scan.result }} |
            
            View the [full security report](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details.`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('= Security Scan Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }